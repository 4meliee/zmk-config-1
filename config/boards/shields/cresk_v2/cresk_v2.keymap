/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <600>;
};

&sl {
    release-after-ms = <600>;
};

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <600>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W     &kp E     &kp R        &kp T    &kp Y     &kp U    &kp I     &kp O     &kp P
&kp A        &kp S     &kp D     &kp F        &kp G    &kp H     &kp J    &kp K     &kp L     &kp SEMI
&kp Z        &kp X     &kp C     &kp V        &kp B    &kp N     &kp M    &kp COMMA &kp DOT   &kp FSLH
//&kp C_MUTE &none &none &td0 &sk LCTRL &kp SPACE &sl 1 &none &none &none
&kp N1       &kp N2    &kp N3    &kp N4       &kp N5   &kp N6    &kp N7   &kp N8    &kp N9    &kp N0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;

        }
;
        lower_layer {
            bindings = <
&kp N1       &kp N2    &kp N3    &kp N4       &kp N5   &kp N6    &kp N7   &kp N8    &kp N9    &kp N0
&kp ESC      &kp SQT   &kp DOWN  &kp BSPC     &kp INS &kp UP &kp DEL  &kp END   &kp HOME  &kp TAB
&kp GRAVE    &kp PG_UP &kp LBKT  &kp RET      &kp LEFT  &kp RIGHT    &kp RBKT &kp MINUS &kp EQUAL &kp BSLH
&trans &trans &trans &sk LALT &sk LWIN &trans &sl 2 &trans &trans &trans
            >;
        };

        function_layer {
            bindings = <
&kp F1       &kp F2    &kp F3    &kp F4       &kp F5   &kp F6    &kp F7   &kp F8    &kp F9    &kp F10
&kp F11      &kp F5    &kp F12   &kp LC(BSPC) &none    &none     &none    &none     &none     &none
&kp TILDE    &kp PG_DN &none     &kp C_MUTE   &none    &none     &none    &none     &none     &none
&none &none &none &sk LS(LALT) &sk LC(LWIN) &none &none &none &none &none
            >;
        };
    };
};
